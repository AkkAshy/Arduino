# sensor/serializers.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç—á–∏–∫–∞—Ö

from rest_framework import serializers
from .models import SensorData, Alert, SensorBuffer
from security.models import ArduinoDevice

class SensorDataSerializer(serializers.ModelSerializer):
    token = serializers.CharField(write_only=True)

    class Meta:
        model = SensorData
        fields = [
            'token', 'pir_motion', 'glass_break', 'door_open', 'panic_button',
            'triggered_sensors_count', 'is_valid_alert', 'work_time_status'
        ]
        read_only_fields = ['triggered_sensors_count', 'is_valid_alert', 'work_time_status']

class AlertSerializer(serializers.ModelSerializer):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–≤–æ–≥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç—á–∏–∫–∞—Ö"""
    sensor_states = serializers.SerializerMethodField()
    triggered_sensors_display = serializers.SerializerMethodField()
    time_elapsed = serializers.SerializerMethodField()

    class Meta:
        model = Alert
        fields = [
            'id', 'alert_type', 'timestamp', 'is_acknowledged',
            'device_name', 'device_address',
            'owner_username', 'owner_full_name', 'owner_phone',
            'triggered_sensors', 'sensors_count', 'confidence_level',
            'sensor_states', 'triggered_sensors_display', 'time_elapsed'
        ]
        read_only_fields = ['id', 'timestamp']

    def get_sensor_states(self, obj):
        """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤ (true/false)"""
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤, –±–µ—Ä–µ–º –æ—Ç—Ç—É–¥–∞
        if obj.sensor_data:
            return {
                'pir_motion': obj.sensor_data.pir_motion,
                'glass_break': obj.sensor_data.glass_break,
                'door_open': obj.sensor_data.door_open,
                'panic_button': obj.sensor_data.panic_button
            }

        # –ò–Ω–∞—á–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ triggered_sensors
        all_sensors = {
            'pir_motion': False,
            'glass_break': False,
            'door_open': False,
            'panic_button': False
        }

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º true –¥–ª—è —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        for sensor in obj.triggered_sensors:
            if sensor in all_sensors:
                all_sensors[sensor] = True

        return all_sensors

    def get_triggered_sensors_display(self, obj):
        """–ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º"""
        sensor_names = {
            'pir_motion': 'üö∂ Harakat',
            'glass_break': 'üî® Shisha sinishi',
            'door_open': 'üö™ Eshik ochilishi',
            'panic_button': 'üö® Favqulodda tugma'
        }
        return [sensor_names.get(sensor, sensor) for sensor in obj.triggered_sensors]

    def get_time_elapsed(self, obj):
        """–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏"""
        from django.utils import timezone

        now = timezone.now()
        elapsed = now - obj.timestamp

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        total_seconds = int(elapsed.total_seconds())

        if total_seconds < 0:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫. –Ω–∞–∑–∞–¥"
        elif total_seconds < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
            minutes = total_seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        elif total_seconds < 86400:  # –ú–µ–Ω—å—à–µ –¥–Ω—è
            hours = total_seconds // 3600
            remaining_minutes = (total_seconds % 3600) // 60
            if remaining_minutes > 0:
                return f"{hours} —á. {remaining_minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                return f"{hours} —á. –Ω–∞–∑–∞–¥"
        else:  # –ë–æ–ª—å—à–µ –¥–Ω—è
            days = elapsed.days
            hours = (total_seconds % 86400) // 3600
            if hours > 0:
                return f"{days} –¥–Ω. {hours} —á. –Ω–∞–∑–∞–¥"
            else:
                return f"{days} –¥–Ω. –Ω–∞–∑–∞–¥"

class DeviceSettingsSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    work_start_time = serializers.TimeField(format='%H:%M')
    work_end_time = serializers.TimeField(format='%H:%M')
    current_work_status = serializers.SerializerMethodField()

    class Meta:
        model = ArduinoDevice
        fields = [
            'id', 'name', 'work_schedule_enabled', 'work_start_time', 'work_end_time',
            'multi_sensor_required', 'sensor_count_threshold', 'time_window_seconds',
            'timezone_name', 'current_work_status'
        ]

    def get_current_work_status(self, obj):
        return obj.is_work_time_now()

class SensorBufferSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    class Meta:
        model = SensorBuffer
        fields = [
            'id', 'timestamp', 'pir_motion', 'glass_break', 'door_open',
            'panic_button', 'is_processed', 'created_alert'
        ]