# sensor/models.py - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

from django.db import models
from django.utils import timezone
from datetime import timedelta
from security.models import ArduinoDevice

class SensorData(models.Model):
    device = models.ForeignKey(ArduinoDevice, on_delete=models.CASCADE, related_name='sensor_data')
    timestamp = models.DateTimeField(auto_now_add=True)
    
    # –î–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤
    pir_motion = models.BooleanField(default=False)
    glass_break = models.BooleanField(default=False)
    door_open = models.BooleanField(default=False)
    panic_button = models.BooleanField(default=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    temperature = models.FloatField(null=True, blank=True)
    humidity = models.FloatField(null=True, blank=True)
    
    # üß† –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–º–Ω–æ–π –ª–æ–≥–∏–∫–∏
    triggered_sensors_count = models.IntegerField(default=0, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤")
    is_valid_alert = models.BooleanField(default=False, help_text="–ü—Ä–æ—à–ª–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å")
    work_time_status = models.BooleanField(default=True, help_text="–ë—ã–ª–æ –ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏")
    
    class Meta:
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['device', '-timestamp']),
            models.Index(fields=['is_valid_alert', '-timestamp']),
        ]
    
    def save(self, *args, **kwargs):
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        self.triggered_sensors_count = sum([
            self.pir_motion,
            self.glass_break, 
            self.door_open,
            self.panic_button
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        self.work_time_status = self.device.is_work_time_now()
        
        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"{self.device.name} - {self.timestamp} ({'Valid' if self.is_valid_alert else 'Pending'})"

class SensorBuffer(models.Model):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–∞—Ç—á–∏–∫–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    device = models.ForeignKey(ArduinoDevice, on_delete=models.CASCADE, related_name='sensor_buffer')
    timestamp = models.DateTimeField(auto_now_add=True)
    
    # –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    pir_motion = models.BooleanField(default=False)
    glass_break = models.BooleanField(default=False)
    door_open = models.BooleanField(default=False)
    panic_button = models.BooleanField(default=False)
    
    
    # –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    is_processed = models.BooleanField(default=False)
    created_alert = models.BooleanField(default=False)
    
    class Meta:
        ordering = ['-timestamp']
    
    def __str__(self):
        return f"Buffer {self.device.name} - {self.timestamp}"

class Alert(models.Model):
    ALERT_TYPES = [
        ('motion', '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ'),
        ('glass', '–†–∞–∑–±–∏—Ç–∏–µ —Å—Ç–µ–∫–ª–∞'),
        ('door', '–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏'),
        ('panic', '–ü–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞'),
        ('multi_sensor', '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ'),  # –ù–æ–≤—ã–π —Ç–∏–ø
    ]
    
    device = models.ForeignKey(ArduinoDevice, on_delete=models.CASCADE, related_name='alerts')
    alert_type = models.CharField(max_length=15, choices=ALERT_TYPES)
    timestamp = models.DateTimeField(auto_now_add=True)
    is_acknowledged = models.BooleanField(default=False)
    sensor_data = models.ForeignKey(SensorData, on_delete=models.CASCADE, null=True, blank=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏ –∞–¥—Ä–µ—Å–µ
    device_name = models.CharField(max_length=100)
    device_address = models.CharField(max_length=255, blank=True, null=True)
    owner_id = models.IntegerField()
    owner_username = models.CharField(max_length=150)
    owner_full_name = models.CharField(max_length=150)
    owner_phone = models.CharField(max_length=20, blank=True, null=True)
    
    # üî• –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    triggered_sensors = models.JSONField(default=list, help_text="–°–ø–∏—Å–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤")
    sensors_count = models.IntegerField(default=1, help_text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤")
    confidence_level = models.CharField(
        max_length=10, 
        choices=[('low', '–ù–∏–∑–∫–∞—è'), ('medium', '–°—Ä–µ–¥–Ω—è—è'), ('high', '–í—ã—Å–æ–∫–∞—è')],
        default='medium'
    )
    
    class Meta:
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['device', '-timestamp']),
            models.Index(fields=['is_acknowledged', '-timestamp']),
            models.Index(fields=['alert_type', '-timestamp']),
        ]
    
    def __str__(self):
        return f"{self.device_name} - {self.get_alert_type_display()} - {self.timestamp}"
    
    def save(self, *args, **kwargs):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if not self.pk and self.device:
            self.device_name = self.device.name or 'Unnamed Device'
            self.device_address = self.device.address
            if self.device.user:
                self.owner_id = self.device.user.id
                self.owner_username = self.device.user.username
                self.owner_full_name = self.device.user.full_name
                self.owner_phone = self.device.user.phone_number
        super().save(*args, **kwargs)